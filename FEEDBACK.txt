Documentação:  

Obrigatórios: 
    Briefing : Objetivo e Intrudução 
    Escopo 
        Diagrama de Classe - MER
        Regras de negócio 
        Requisitos Funcionais 
        Requisitos Não Funcionais 
        Diagrama de Casos de Uso < desenho bonequinho 
        Modelo Conceitual - DER
        
---

Com certeza. Com base em todos os arquivos fornecidos, preparei uma documentação completa do projeto, seguindo a estrutura solicitada.

---

# **Documentação do Projeto: Sistema de Gestão Hospitalar**

**Data:** 1 de agosto de 2025

## 1. Introdução e Objetivo

Este documento detalha a estrutura, funcionalidades e regras do **Sistema de Gestão Hospitalar**. Trata-se de uma aplicação web desenvolvida para centralizar e otimizar a administração de informações essenciais em uma unidade de saúde, como hospitais ou clínicas.

O **objetivo principal** do projeto é substituir processos manuais ou descentralizados por uma plataforma única e segura, garantindo maior eficiência na gestão de dados de pacientes, médicos e consultas, além de assegurar a integridade e a rastreabilidade das informações.

## 2. Briefing do Projeto

* **Problema:** A gestão de informações hospitalares sem uma ferramenta centralizada pode levar a ineficiências, perda de dados, dificuldade no agendamento e falta de um histórico consolidado dos pacientes.
* **Solução Proposta:** Desenvolver um sistema web com acesso restrito por login e senha, onde administradores possam realizar o cadastro e o gerenciamento completo de pacientes, médicos, convênios associados e o agendamento de consultas.
* **Público-Alvo:** Usuários administrativos responsáveis pela organização e controle dos dados da instituição de saúde.
* **Tecnologias Base:** A aplicação é construída utilizando PHP para o back-end, MySQL para o banco de dados e HTML/CSS para a interface do usuário.

## 3. Requisitos Funcionais (RF)

* **RF01 - Autenticação de Usuário:**
    * O sistema deve permitir que um usuário se cadastre com nome, e-mail e senha.
    * O sistema deve permitir que um usuário realize login usando e-mail e senha.
    * O sistema deve validar os dados de login e conceder acesso apenas a usuários cadastrados.
    * O sistema deve ter uma funcionalidade de logout que encerre a sessão do usuário.
    * O sistema deve restringir o acesso às páginas de gerenciamento apenas para usuários autenticados.

* **RF02 - Gerenciamento de Pacientes:**
    * O sistema deve permitir o cadastro de novos pacientes com nome, sobrenome, data de nascimento, sexo e data de cadastro.
    * O sistema deve permitir a visualização de todos os pacientes cadastrados em uma lista.
    * O sistema deve permitir a alteração dos dados de um paciente existente.
    * O sistema deve permitir a exclusão de um paciente.

* **RF03 - Gerenciamento de Médicos:**
    * O sistema deve permitir o cadastro de novos médicos com nome, especialidade e CRM.
    * O sistema deve listar todos os médicos cadastrados.
    * O sistema deve permitir a alteração dos dados de um médico existente.
    * O sistema deve permitir a exclusão de um médico.

* **RF04 - Gerenciamento de Consultas:**
    * O sistema deve permitir agendar uma nova consulta, associando um paciente e um médico a uma data, hora e especialidade.
    * O sistema deve listar todas as consultas agendadas.
    * O sistema deve permitir a alteração dos dados de uma consulta.
    * O sistema deve permitir a exclusão (cancelamento) de uma consulta.

* **RF05 - Gerenciamento de Convênios e Endereços:**
    * O sistema deve permitir o cadastro de convênios, associando-os a um paciente.
    * O sistema deve permitir o cadastro de múltiplos endereços, associando-os a um paciente.
    * O sistema deve permitir a visualização, alteração e exclusão de convênios e endereços.

## 4. Requisitos Não Funcionais (RNF)

* **RNF01 - Segurança:**
    * As senhas dos usuários devem ser armazenadas no banco de dados de forma criptografada.
    * A sessão do usuário deve ser mantida por um token seguro.

* **RNF02 - Usabilidade e Interface:**
    * A interface deve ser intuitiva e de fácil navegação.
    * O sistema deve ser responsivo, adaptando-se a diferentes tamanhos de tela (desktop e mobile).

* **RNF03 - Desempenho:**
    * As consultas ao banco de dados devem ser otimizadas para um tempo de resposta rápido.
    * A conexão com o banco de dados deve ser gerenciada de forma eficiente, utilizando o padrão Singleton para evitar múltiplas conexões desnecessárias.

* **RNF04 - Manutenibilidade:**
    * O código deve ser organizado em camadas (Apresentação, Modelo, DAO), separando as responsabilidades para facilitar futuras manutenções.

## 5. Escopo do Projeto

* **Dentro do Escopo:**
    * Todas as funcionalidades descritas nos Requisitos Funcionais (Autenticação e CRUDs de Pacientes, Médicos, Consultas, Convênios e Endereços).
    * Interface web para administração dos dados.

* **Fora do Escopo:**
    * Portal de acesso para pacientes ou médicos.
    * Módulo financeiro ou de faturamento de convênios.
    * Módulo de controle de estoque de medicamentos ou suprimentos.
    * Integração com sistemas de exames laboratoriais.
    * Notificações por e-mail ou SMS para lembretes de consulta.

## 6. Diagrama de Casos de Uso

* **Ator Principal:** Usuário Administrativo

* **Casos de Uso:**
    * **Autenticar-se:** Inclui as ações de `Login`, `Logout` e `Cadastro`.
    * **Gerenciar Pacientes:**
        * Cadastrar Paciente
        * Listar Pacientes
        * Editar Paciente
        * Excluir Paciente
    * **Gerenciar Médicos:**
        * Cadastrar Médico
        * Listar Médicos
        * Editar Médico
        * Excluir Médico
    * **Gerenciar Consultas:**
        * Agendar Consulta
        * Listar Consultas
        * Editar Consulta
        * Cancelar Consulta
    * **Gerenciar Dados Associados:**
        * Gerenciar Convênios
        * Gerenciar Endereços

## 7. Modelo Conceitual - DER (Diagrama de Entidade-Relacionamento)

Baseado no script `minoru_gestao_hospitalar.sql`.

* **Entidades:**
    * `USUARIO` (id, nome, email, senha, token)
    * `PACIENTE` (id, nome, sobrenome, data_nascimento, sexo, data_cadastro)
    * `MEDICO` (id, nome, especialidade, crm)
    * `CONSULTA` (id, data, horas, especialidade)
    * `CONVENIO` (id, empresa, cnpj, telefone, email)
    * `ENDERECO` (id, logradouro, bairro, cidade, estado)

* **Relacionamentos:**
    * Um `PACIENTE` pode ter muitas `CONSULTAS`. Uma `CONSULTA` pertence a apenas um `PACIENTE` (1-N).
    * Um `MEDICO` pode ter muitas `CONSULTAS`. Uma `CONSULTA` é realizada por apenas um `MEDICO` (1-N).
    * Um `PACIENTE` pode ter muitos `CONVENIOS` (1-N).
    * Um `PACIENTE` pode ter muitos `ENDERECOS` (1-N).

## 8. Diagrama de Classe

Baseado nos arquivos das camadas Model e DAO.

* **Classe: `Usuario`**
    * Atributos: `-id`, `-nome`, `-email`, `-senha`, `-token`
    * Métodos: `+__construct()`, `+getId()`, `+getNome()`, `+getEmail()`, `+getSenha()`, `+getToken()`

* **Classe: `UsuarioDAO`**
    * Métodos: `+create(Usuario)`, `+updateToken(id, token)`, `+getByEmail(email): Usuario`, `+getByToken(token): Usuario`

* **Classe: `Paciente`**
    * Atributos: `-id`, `-nome`, `-sobrenome`, `-data_nascimento`, `-sexo`, `-data_cadastro`
    * Métodos: `+__construct()`, `+getId()`, `+getNome()`, `+get/set...`

* **Classe: `PacienteDAO`**
    * Métodos: `+create(Paciente)`, `+getAll(): Paciente[]`, `+getById(id): Paciente`, `+update(Paciente)`, `+excluir(id)`

* *(O mesmo padrão se aplica para as classes `Medico`/`MedicoDAO`, `Consulta`/`ConsultaDAO`, `Convenio`/`ConvenioDAO` e `Endereco`/`EnderecoDAO`)*.

## 9. Regras de Negócio

* **RN01:** O acesso ao sistema de gerenciamento é restrito e requer autenticação prévia.
* **RN02:** O e-mail de um usuário deve ser único no sistema.
* **RN03:** Todos os campos dos formulários de cadastro são obrigatórios para garantir a consistência dos dados.
* **RN04:** Uma consulta só pode ser agendada se o paciente e o médico selecionados já existirem no banco de dados.
* **RN05:** Um convênio ou endereço só pode ser cadastrado se estiver associado a um paciente existente.
* **RN06:** Ao excluir um paciente, todos os seus registros associados (consultas, convênios e endereços) são automaticamente excluídos em cascata para manter a integridade do banco de dados.