// Declara a chave da API (coment√°rios indicam chaves anteriores utilizadas para testes)
// const API_KEY = '...'; // Chave antiga comentada
// const API_KEY = '...'; // Outra chave antiga comentada
const API_KEY = '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'; // Chave atual em uso

// Dicion√°rio de respostas predefinidas
const respostasPredefinidas = {
    // Sauda√ß√µes e apresenta√ß√£o
    "me fale sobre voc√™": "Ol√°! Sou o Vita, seu assistente de gest√£o hospitalar. Fui desenvolvido para apoiar a equipe de sa√∫de na organiza√ß√£o de dados, otimiza√ß√£o de processos e melhoria na rotina hospitalar. Como posso ajudar hoje?",
    "ol√°": "Ol√°! Sou o Vita, pronto para auxiliar na gest√£o hospitalar. Em que posso ajudar?",
    "oi": "Oi! Aqui √© o Vita, seu assistente de apoio √† sa√∫de. O que posso fazer por voc√™?",
    "bom dia": "Bom dia! Vita √† disposi√ß√£o para ajudar a tornar o seu dia no hospital mais produtivo. üöÄ",
    "boa tarde": "Boa tarde! Conte comigo para agilizar os processos hospitalares. üè•",
    "boa noite": "Boa noite! Estou aqui caso precise de suporte na gest√£o hospitalar. üåô",
    "quem √© voc√™": "Sou o Vita, um assistente virtual desenvolvido para ajudar hospitais a funcionarem de forma mais eficiente, liberando tempo para que os profissionais de sa√∫de foquem no cuidado com os pacientes. ‚ù§Ô∏è",
    "como voc√™ funciona": "Funciono com tecnologia avan√ßada e intelig√™ncia artificial. Tenho respostas programadas e tamb√©m posso buscar informa√ß√µes mais complexas quando necess√°rio. Estou aqui para facilitar o dia a dia hospitalar.",

    // Perguntas voltadas ao tema
    "qual sua fun√ß√£o": "Minha miss√£o √© apoiar a equipe hospitalar em tarefas como organiza√ß√£o de informa√ß√µes, triagem de dados, e automa√ß√£o de processos administrativos.",
    "voc√™ pode me ajudar com a gest√£o de pacientes?": "Sim! Posso auxiliar na organiza√ß√£o de prontu√°rios, agendamentos, registros de atendimento e outras rotinas relacionadas aos pacientes.",
    "voc√™ pode otimizar processos?": "Claro! Minha fun√ß√£o √© justamente identificar gargalos e sugerir melhorias que tornem os fluxos hospitalares mais √°geis e eficientes.",
    "voc√™ ajuda m√©dicos e enfermeiros?": "Sim, apoio todos os profissionais de sa√∫de, liberando tempo e reduzindo tarefas administrativas repetitivas para que possam focar no atendimento aos pacientes.",

    // Informa√ß√µes sobre o projeto
    "como foi criado": "Fui desenvolvido com tecnologias como HTML, CSS, JavaScript e APIs inteligentes, com foco em solu√ß√µes para o ambiente hospitalar.",
    "quem te criou": "Fui criado por uma equipe dedicada a transformar a rotina hospitalar com tecnologia. O objetivo √© facilitar a gest√£o e melhorar o cuidado com os pacientes.",

    // Humor leve e tem√°tico
    "conte uma piada": "Por que o prontu√°rio foi ao m√©dico? Porque ele estava se sentindo incompleto! üòÑ",
    "me fa√ßa rir": "Sabe o que um bisturi disse para o outro? 'Corta essa!' üòÇ",

    // Agradecimentos
    "obrigado": "Disponha! Estou sempre por aqui para ajudar a melhorar o cuidado com seus pacientes. ‚ù§Ô∏è",
    "obrigada": "Imagina! O Vita est√° sempre pronto para apoiar na gest√£o hospitalar. üè•",
    "valeu": "Conte comigo sempre que precisar agilizar algo no hospital. Estou por aqui! üöë",

    // Despedidas
    "tchau": "At√© logo! Que seu dia seja leve e produtivo. üåü",
    "adeus": "At√© breve! O Vita estar√° por aqui quando voc√™ precisar. üíº",
    "at√© mais": "At√© a pr√≥xima! Estarei pronto para ajudar quando precisar. ü§ñ"
};


// Captura os elementos do HTML pelo ID
const content = document.getElementById('content'); // √Årea onde as mensagens ser√£o exibidas
const chatInput = document.getElementById('chatInput'); // Campo onde o usu√°rio digita
const sendButton = document.getElementById('sendButton'); // Bot√£o para enviar mensagem

// Controla se uma resposta est√° sendo carregada
let isAnswerLoading = false;
// Identificador √∫nico para se√ß√µes de resposta
let answerSectionId = 0;

// Adiciona eventos de clique e enter no bot√£o e input
sendButton.addEventListener('click', () => handleSendMessage());
chatInput.addEventListener('keypress', event => {
    if (event.key === 'Enter') { // Quando o usu√°rio aperta "Enter"
        handleSendMessage();
    }
});

// Fun√ß√£o que trata o envio da mensagem
function handleSendMessage() {
    const question = chatInput.value.trim(); // Remove espa√ßos do come√ßo/fim do input

    if (question === '' || isAnswerLoading) return; // N√£o envia se vazio ou carregando resposta

    sendButton.classList.add('send-button-nonactive'); // Desativa visualmente o bot√£o

    addQuestionSection(question); // Adiciona a pergunta na tela
    chatInput.value = ''; // Limpa o campo de texto
}

// Fun√ß√£o que verifica se h√° uma resposta predefinida ou busca na API
function checkForPredefinedAnswer(question) {
    // Converte pergunta para min√∫scula para facilitar a compara√ß√£o
    const questionLower = question.toLowerCase().trim();
    
    // Verifica se existe uma resposta exata no dicion√°rio
    if (respostasPredefinidas[questionLower]) {
        return respostasPredefinidas[questionLower];
    }
    
    // Verifica se a pergunta cont√©m palavras-chave (verifica√ß√£o parcial)
    for (const key in respostasPredefinidas) {
        // Se a pergunta cont√©m a palavra-chave completamente (como palavra)
        if (questionLower.includes(key)) {
            return respostasPredefinidas[key];
        }
    }
    
    // Se n√£o encontrou resposta predefinida, retorna null
    return null;
}

// Fun√ß√£o que busca a resposta (predefinida ou API)
function getAnswer(question) {
    // Verifica primeiro se temos uma resposta predefinida
    const predefinedAnswer = checkForPredefinedAnswer(question);
    
    // Se tiver resposta predefinida, usa ela
    if (predefinedAnswer) {
        setTimeout(() => {
            isAnswerLoading = false;
            addAnswerSection(predefinedAnswer);
            sendButton.classList.remove('send-button-nonactive');
            scrollToBottom();
        }, 500); // Pequeno delay para simular processamento
        return;
    }
    
    // Se n√£o tiver resposta predefinida, busca na API
    const fetchData =
        fetch("https://openrouter.ai/api/v1/chat/completions", {
            method: "POST", // M√©todo POST
            headers: {
                "Authorization": `Bearer ${API_KEY}`, // Autentica√ß√£o
                "Content-Type": "application/json" // Tipo de conte√∫do
            },
            body: JSON.stringify({ // Corpo da requisi√ß√£o
                "model": "deepseek/deepseek-v3-base:free", // Modelo de IA usado (atualizado para o indicado no README)
                "messages": [
                    // {
                    //     "role": "system",
                    //     "content": "Voc√™ √© o Espelho M√°gico, um assistente virtual divertido e m√°gico que fala de forma po√©tica e misteriosa, sempre com um toque de magia e sabedoria nas respostas. Use emojis ocasionalmente para adicionar um toque especial √†s suas respostas."
                    // },
                    {
                        "role": "user",
                        "content": question // Conte√∫do da pergunta enviada
                    }
                ]
            })
        });

    fetchData.then(response => response.json())
        .then(data => {
            const resultData = data.choices[0].message.content; // Extrai o texto da resposta
            isAnswerLoading = false; // Marca que a resposta terminou de carregar
            addAnswerSection(resultData); // Adiciona a resposta na tela
        }).catch(error => {
            console.error("Erro ao buscar resposta:", error);
            isAnswerLoading = false;
            addAnswerSection("Estou com dificuldades de conex√£o no momento. Tente novamente em breve. ‚ú®");
        }).finally(() => {
            scrollToBottom(); // Faz a tela rolar para a √∫ltima mensagem
            sendButton.classList.remove('send-button-nonactive'); // Ativa o bot√£o novamente
        });
}

// Fun√ß√£o que adiciona a pergunta na tela
function addQuestionSection(message) {
    isAnswerLoading = true; // Agora est√° carregando a resposta
    const sectionElement = document.createElement('section'); // Cria uma se√ß√£o
    sectionElement.className = 'question-section'; // Classe para estiliza√ß√£o
    sectionElement.textContent = message; // Insere o texto da pergunta

    content.appendChild(sectionElement); // Adiciona no conte√∫do
    addAnswerSection(message); // Cria a se√ß√£o para a resposta (com loading)
    scrollToBottom(); // Rola a p√°gina para baixo
}

// Fun√ß√£o que adiciona a resposta
function addAnswerSection(message) {
    if (isAnswerLoading) {
        answerSectionId++; // Incrementa o ID para se√ß√µes de resposta
        const sectionElement = document.createElement('section'); // Cria uma nova se√ß√£o
        sectionElement.className = 'answer-section'; // Classe para resposta
        sectionElement.innerHTML = getLoadingSvg(); // Coloca o SVG de carregando
        sectionElement.id = answerSectionId; // Define um ID para depois alterar

        content.appendChild(sectionElement); // Adiciona no conte√∫do
        getAnswer(message); // Chama a fun√ß√£o para buscar a resposta
    } else {
        const answerSectionElement = document.getElementById(answerSectionId); // Pega a se√ß√£o criada
        answerSectionElement.textContent = message; // Atualiza o texto com a resposta recebida
    }
    // Chama a fun√ß√£o para criar o efeito m√°gico ap√≥s a resposta ser adicionada
    criarEfeitoMagico();
}

// Fun√ß√£o que retorna o SVG (√≠cone) de carregando
function getLoadingSvg() {
    return '<svg style="height: 25px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">' +
        '<circle fill="gold" stroke="gold" stroke-width="15" r="15" cx="40" cy="65">' +
        '<animate attributeName="cy" calcMode="spline" dur="2" values="65;135;65;" keySplines=".5 0 .5 1;.5 0 .5 1" repeatCount="indefinite" begin="-.4"></animate>' +
        '</circle>' +
        '<circle fill="gold" stroke="gold" stroke-width="15" r="15" cx="100" cy="65">' +
        '<animate attributeName="cy" calcMode="spline" dur="2" values="65;135;65;" keySplines=".5 0 .5 1;.5 0 .5 1" repeatCount="indefinite" begin="-.2"></animate>' +
        '</circle>' +
        '<circle fill="gold" stroke="gold" stroke-width="15" r="15" cx="160" cy="65">' +
        '<animate attributeName="cy" calcMode="spline" dur="2" values="65;135;65;" keySplines=".5 0 .5 1;.5 0 .5 1" repeatCount="indefinite" begin="0"></animate>' +
        '</circle>' +
    '</svg>';
    // Um SVG animado para mostrar que est√° carregando
}

// Fun√ß√£o para rolar automaticamente at√© o fim do conte√∫do
function scrollToBottom() {
    content.scrollTo({
        top: content.scrollHeight,
        behavior: 'smooth' // Anima a rolagem
    });
}

// EFEITO EXTRA: Cria√ß√£o de brilhos m√°gicos ao responder
// Fun√ß√£o que cria part√≠culas (fa√≠scas) na tela
function criarEfeitoMagico() {
    for (let i = 0; i < 15; i++) { // Cria 15 fa√≠scas
        setTimeout(() => {
            const spark = document.createElement('div'); // Cria uma fa√≠sca
            spark.className = 'spark'; // Classe para estilizar

            // Define posi√ß√£o aleat√≥ria
            const x = Math.random() * 360;
            const y = Math.random() * 500;

            spark.style.left = `${x}px`;
            spark.style.top = `${y}px`;

            document.querySelector('.container').appendChild(spark); // Adiciona no container

            // Anima a fa√≠sca: ela aparece e depois some
            setTimeout(() => {
                spark.style.opacity = '1'; // Aparece
                spark.style.transform = `translate(${(Math.random() - 0.5) * 50}px, ${(Math.random() - 0.5) * 50}px)`; // Movimento aleat√≥rio
                spark.style.transition = 'opacity 0.5s ease-out, transform 1.5s ease-out'; // Efeito suave
                
                setTimeout(() => {
                    spark.style.opacity = '0'; // Some
                    setTimeout(() => {
                        spark.remove(); // Remove do DOM
                    }, 500);
                }, 1000);
            }, 10);
        }, i * 100); // Pequeno atraso entre cada fa√≠sca
    }
}